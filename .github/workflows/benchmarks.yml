name: Benchmarks

on:
  workflow_dispatch:
    # note: by design GitHub workflow dispatch events are limited to 10 inputs
    inputs:
      burn_bench_config_json:
        description: "JSON config with backends, benches, dtypes, and versions"
        required: false
        default: '{"backends":["wgpu-fusion"],"benches":["matmul"],"dtypes":["f16"],"versions":["main"]}'
      gcp_gpu_attached:
        description: "Must be true if the machine type has a GPU attached"
        type: boolean
        required: false
        default: true
      gcp_image_family:
        description: "GCP image family to use"
        required: false
        default: "tracel-ci-ubuntu-2404-amd64-nvidia"
      gcp_machine_type:
        description: "GCP machine type to use"
        required: false
        default: "g2-standard-4"
      gcp_zone:
        description: "GCP zone to use"
        required: false
        default: "us-east1-c"
      pr_number:
        description: "Number of the pull request that triggers this run if any"
        type: number
        required: false
      repo_full:
        description: "Full repository name, e.g. tracel-ai/burn"
        required: false
        default: "tracel-ai/burn"
      rust_toolchain:
        description: "The Rust toolchain"
        required: false
        default: "stable"
      rust_version:
        description: "The Rust version"
        required: false
        default: "stable"

env:
  INPUTS_FILE: inputs.json

jobs:
  burn-bench:
    runs-on: [
      '@id:benchmarks-job-${{ github.run_id }}-${{ github.run_attempt }}',
      '@image-family:${{ inputs.gcp_image_family }}',
      '@machine-type:${{ inputs.gcp_machine_type }}',
      '@zone:${{ inputs.gcp_zone }}',
      '@gpu:${{ inputs.gcp_gpu_attached }}' ]
    steps:
      # ----------------------------------------------------------------------
      - name: Setup Rust
        uses: tracel-ai/github-actions/setup-rust@v3
        with:
          rust-toolchain: ${{ inputs.rust_toolchain }}
          cache-key: ${{ inputs.rust_version }}-benchmarks
      - name: Get Job URL
        uses: Tiryoh/gha-jobid-action@v1
        id: jobs
        with:
          job_name: ${{ github.job }}
      - name: Install jq
        run: sudo apt update && sudo apt install -y jq
      - name: Parse config
        id: burn_bench_config_json
        run: |
          echo '${{ inputs.burn_bench_config_json }}' > config.json
          echo "BACKENDS=$(jq -r '.backends | join(" ")' config.json)" >> $GITHUB_ENV
          echo "BENCHES=$(jq -r '.benches | join(" ")' config.json)" >> $GITHUB_ENV
          echo "DTYPES=$(jq -r '.dtypes | join(" ")' config.json)" >> $GITHUB_ENV
          echo "VERSIONS=$(jq -r '.versions | join(" ")' config.json)" >> $GITHUB_ENV
      # ----------------------------------------------------------------------
      - name: Print configuration
        run: |
          echo "Versions: $VERSIONS"
          echo "Backends: $BACKENDS"
          echo "DTypes: $DTYPES"
          echo "Benchmarks: $BENCHES"
          echo "Repository: ${{ inputs.repo_full }}"
          echo "Pull Request Number: ${{ inputs.pr_number }}"
          echo "GCP Image Family: ${{ inputs.gcp_image_family }}"
          echo "GCP Machine Type: ${{ inputs.gcp_machine_type }}"
          echo "GCP Zone: ${{ inputs.gcp_zone }}"
      # ----------------------------------------------------------------------
      - name: Write inputs to ${{ env.INPUTS_FILE }}
        run: |
          PR_NUMBER_INPUT='${{ inputs.pr_number }}'
          if [[ -z "$PR_NUMBER_INPUT" ]]; then
            PR_NUMBER_JSON=null
          else
            PR_NUMBER_JSON="$PR_NUMBER_INPUT"
          fi

          jq -n \
            --arg burn_bench_config_json '${{ inputs.burn_bench_config_json }}' \
            --argjson gcp_gpu_attached '${{ inputs.gcp_gpu_attached }}' \
            --arg gcp_image_family '${{ inputs.gcp_image_family }}' \
            --arg gcp_machine_type '${{ inputs.gcp_machine_type }}' \
            --arg gcp_zone '${{ inputs.gcp_zone }}' \
            --argjson pr_number "$PR_NUMBER_JSON" \
            --arg repo_full '${{ inputs.repo_full }}' \
            --arg rust_toolchain '${{ inputs.rust_toolchain }}' \
            --arg rust_version '${{ inputs.rust_version }}' \
            --arg workflow_url "${{ steps.jobs.outputs.html_url }}#:step:8:1" \
            '{
              burn_bench_config_json: $burn_bench_config_json,
              gcp_gpu_attached: $gcp_gpu_attached,
              gcp_image_family: $gcp_image_family,
              gcp_machine_type: $gcp_machine_type,
              gcp_zone: $gcp_zone,
              pr_number: $pr_number,
              repo_full: $repo_full,
              rust_toolchain: $rust_toolchain,
              rust_version: $rust_version,
              workflow_url: $workflow_url
            }' > "$INPUTS_FILE"

            cat "$INPUTS_FILE"
      # ----------------------------------------------------------------------
      - name: Run benchmarks
        env:
          GITHUB_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
          WEBHOOK_INPUTS_FILE: ${{ env.INPUTS_FILE }}
          WEBHOOK_PAYLOAD_SECRET: ${{ secrets.WEBHOOK_PAYLOAD_SECRET }}
        run: |
          cargo bb run -b $BENCHES -B $BACKENDS -V $VERSIONS -v -d $DTYPES --share
